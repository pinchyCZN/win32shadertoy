uniform vec3      iResolution;           // viewport resolution (in pixels)
uniform float     iGlobalTime;           // shader playback time (in seconds)
uniform sampler2D iChannel0;          // input channel. XX = 2D/Cube
uniform sampler2D iChannel1;          // input channel. XX = 2D/Cube
uniform sampler2D iChannel2;          // input channel. XX = 2D/Cube
uniform sampler2D iChannel3;          // input channel. XX = 2D/Cube
uniform float     iChannelTime[4];       // channel playback time (in seconds)
uniform vec3      iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4      iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform vec4      iDate;                 // (year, month, day, time in seconds)

//Thank you iquilez for some of the primitive distance functions!


uniform float     iTime;           // shader playback time (in seconds)


const float PI = 3.14159265358979323846264;


const int MAX_PRIMARY_RAY_STEPS = 64; //decrease this number if it runs slow on your computer

vec2 rotate2d(vec2 v, float a) { 
	return vec2(v.x * cos(a) - v.y * sin(a), v.y * cos(a) + v.x * sin(a)); 
}

float sdTorus( vec3 p, vec2 t ) {
  vec2 q = vec2(length(p.xz)-t.x,p.y);
  return length(q)-t.y;
}

float distanceField(vec3 p) {
	return -sdTorus(p, vec2(4.0, 3.0));
}

vec3 castRay(vec3 pos, vec3 dir, float treshold) {
	for (int i = 0; i < MAX_PRIMARY_RAY_STEPS; i++) {
			float dist = distanceField(pos);
			//if (abs(dist) < treshold) break;
			pos += dist * dir;
	}
	return pos;
}

void main(void)
{
	vec4 mousePos = (iMouse / iResolution.xyxy) * 2.0 - 1.0;
	vec2 screenPos = (gl_FragCoord.xy / iResolution.xy) * 2.0 - 1.0;
	vec3 cameraPos = vec3(0.0, 0.0, -2.8);
	
	vec3 cameraDir = vec3(0.0, 0.0, 0.5);
	vec3 planeU = vec3(1.0, 0.0, 0.0) * .80;
	vec3 planeV = vec3(0.0, iResolution.y / iResolution.x * 1.0, 0.0);
	vec3 rayDir = normalize(cameraDir + screenPos.x * planeU + screenPos.y * planeV);
	

	vec3 rayPos = castRay(cameraPos, rayDir, 0.01);
	
	float majorAngle = atan(rayPos.z, rayPos.x/2);
	float minorAngle = atan(rayPos.y, length(rayPos.xz) - 4.0);
		
	float edge = mod(8.0 * (minorAngle + majorAngle +iTime/10) / PI, 1.0);
	float color;
	if(edge<.5)
		color=1;
	else
		color=0;
//	if(edge<.7)
//		color=smoothstep(edge, edge+0.03, 0.5);
//	else
//		color=1.0-smoothstep(edge, edge+0.03, 0.96)	;
//	color = edge < 0.7 ?  : ;
	//float color = step(mod(8.0 * (minorAngle + majorAngle + iTime) / PI, 1.0), 0.5);
	//color -= 0.20 * step(mod(1.0 * (minorAngle + 1.0 * majorAngle + PI / 2.0) / PI, 1.0), 0.2);
	
	gl_FragColor= vec4(color);
}